# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QC6qXLgSiq3NgNOUaN2jDlO_9Os3Ozfj
"""

# SOBREESCRITURA DE METODOS

class Animal:
    def desplazar(self):
        print('Me descplazo...')
    
    def saludar(self):
        print('Hola, estoy saludando...')

class Perro(Animal):
# SE SOBREESCRIBE EL METODO DESPLAZAR Y SE  GUARDA LA INFORMACION EN ESTE
    def desplazar(self):
        print('Me desplazo en 4 patas...')
    def saludar(self):
        print('Hola, SOY UN PERRO...')
class Pajaro(Animal):
    def desplazar(self):
        print('Me desplazo volando...')
    def saludar(self):
        print('Hola, SOY UN PAJARO ...')
class Pez(Animal):
    def desplazar(self):
        print('Me desplazo en nadando...')
    def saludar(self):
        print('Hola, SOY UN PEZ...')
animal1 = Animal()
animal1.saludar()

# FUNCION ISINSTANCE

lista = [1,2,3,4,5]
diccionario = {1:'uno',2:'dos'}
numero = 5


resultado = isinstance(lista,list)
# True
print(f'{lista} es instancia de List? {resultado}')

result = isinstance(diccionario,dict)
# True
print(f'{diccionario} es instancia de Dict? {result}')

resultado = isinstance(numero,(list,dict))
# True
print(f'{numero} es instancia de List o Dict? {resultado}')

# FUNCION SUPER

class Pajaro:
    def __init__(self, color, plumas):
        self.color = color
        self.plumas = plumas
    
    def volar(self, kilometros):
        print(f'Ha recorrido {kilometros} kilometros....')
# LO QUE HAREMOS ES LLAMAR AL CONTRUCTOR PADRE CON SUPER
class Gorrion(Pajaro):
    def __init__(self, color, plumas, nombre):
        super().__init__(color,plumas)
        self.nombre = nombre
# LLAMAR AL METODO DENTRO DE OTRO METODO
    def desplazar(self, tiempo, kilometros):
        print(f'Ha volado {tiempo} minutos....')
        super().volar(kilometros)



pajaro1 = Gorrion('Azul', 'Peque√±as','Pajaro Loco')
pajaro1.desplazar(5,3)

